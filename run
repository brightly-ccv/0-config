#!/usr/bin/env bash
# This script was generated by bashly 1.1.10 (https://bashly.dannyb.co)
# Modifying it manually is not recommended

# :wrapper.bash3_bouncer
if [[ "${BASH_VERSINFO:-0}" -lt 4 ]]; then
  printf "bash version 4 or higher is required\n" >&2
  exit 1
fi

# :command.master_script
# :command.root_command
root_command() {
  # src/root_command.sh
  inspect_args
  sudo yum install -y keepassxc git gh glab ansible ansible-core which gcc openssl-devel

  if [ ! -d "0-config" ] ; then
  	git clone https://github.com/brightly-ccv/0-config
  fi

  cd 0-config || exit

  if [ -z "${args[--test]}" ]; then
  	if [ ! -f "$private_ssh_key" ]; then
  		mkdir -p -m 700 ~/.ssh
  		ssh-keygen -t ed25519 -f "$private_ssh_key"
  		eval "$(ssh-agent -s)"
  		ssh-add
  	fi
  	gh auth login -h github.com -p ssh -w -s admin:public_key
  	counter=0
  	while [ $counter -lt "${args[--gitlab_hosts]}" ]; do
  		glab auth login -h "$host"
  		glab config set gitlab_host "$host"
  		glab ssh-key add -t "main driver" "$public_ssh_key"
  		((counter++))
  	done
  fi

  curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain nightly
  sh -c "$(curl -fsLS get.chezmoi.io)" -- -b "$HOME/bin"
  . "$HOME/.cargo/env"
  cargo +nightly install git-repo-manager

  if [ -z "${args[--test]}" ]; then
  	eval "$(ssh-agent -s)"
  	ssh-add
  	chezmoi init --apply git@github.com:brightly-ccv/dotfiles.git
  	grm repos sync config --config ~/.config/grm/config.toml
  fi
  echo "run 'source $HOME/.cargo/env' if you want to enable rust tools in this session"

}

# :command.version_command
version_command() {
  echo "$version"
}

# :command.usage
run_usage() {
  if [[ -n $long_usage ]]; then
    printf "run - Bootstrap Config\n"
    echo

  else
    printf "run - Bootstrap Config\n"
    echo

  fi

  printf "%s\n" "Usage:"
  printf "  run [OPTIONS]\n"
  printf "  run --help | -h\n"
  printf "  run --version | -v\n"
  echo

  # :command.long_usage
  if [[ -n $long_usage ]]; then
    printf "%s\n" "Options:"

    # :command.usage_flags
    # :flag.usage
    printf "  %s\n" "--test, -t"
    printf "    Testing skips ssh key generation\n"
    echo

    # :flag.usage
    printf "  %s\n" "--gitlab_hosts, -g GITLAB_HOSTS"
    printf "    Gitlab hosts to log in\n"
    echo

    # :command.usage_fixed_flags
    printf "  %s\n" "--help, -h"
    printf "    Show this help\n"
    echo
    printf "  %s\n" "--version, -v"
    printf "    Show version number\n"
    echo

    # :command.usage_environment_variables
    printf "%s\n" "Environment Variables:"

    # :environment_variable.usage
    printf "  %s\n" "PRIVATE_SSH_KEY"
    printf "    Set private ssh key path\n"
    printf "    Default: $HOME/.ssh/id_ed25519\n"
    echo

    # :environment_variable.usage
    printf "  %s\n" "PUBLIC_SSH_KEY"
    printf "    Set public ssh key path\n"
    printf "    Default: $HOME/.ssh/id_ed25519.pub\n"
    echo

  fi
}

# :command.normalize_input
# :command.normalize_input_function
normalize_input() {
  local arg flags passthru
  passthru=false

  while [[ $# -gt 0 ]]; do
    arg="$1"
    if [[ $passthru == true ]]; then
      input+=("$arg")
    elif [[ $arg =~ ^(--[a-zA-Z0-9_\-]+)=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^(-[a-zA-Z0-9])=(.+)$ ]]; then
      input+=("${BASH_REMATCH[1]}")
      input+=("${BASH_REMATCH[2]}")
    elif [[ $arg =~ ^-([a-zA-Z0-9][a-zA-Z0-9]+)$ ]]; then
      flags="${BASH_REMATCH[1]}"
      for ((i = 0; i < ${#flags}; i++)); do
        input+=("-${flags:i:1}")
      done
    elif [[ "$arg" == "--" ]]; then
      passthru=true
      input+=("$arg")
    else
      input+=("$arg")
    fi

    shift
  done
}

# :command.inspect_args
inspect_args() {
  if ((${#args[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!args[@]}" | sort)
    echo args:
    for k in "${sorted_keys[@]}"; do
      echo "- \${args[$k]} = ${args[$k]}"
    done
  else
    echo args: none
  fi

  if ((${#other_args[@]})); then
    echo
    echo other_args:
    echo "- \${other_args[*]} = ${other_args[*]}"
    for i in "${!other_args[@]}"; do
      echo "- \${other_args[$i]} = ${other_args[$i]}"
    done
  fi

  if ((${#deps[@]})); then
    readarray -t sorted_keys < <(printf '%s\n' "${!deps[@]}" | sort)
    echo
    echo deps:
    for k in "${sorted_keys[@]}"; do
      echo "- \${deps[$k]} = ${deps[$k]}"
    done
  fi

  if ((${#env_var_names[@]})); then
    readarray -t sorted_names < <(printf '%s\n' "${env_var_names[@]}" | sort)
    echo
    echo "environment variables:"
    for k in "${sorted_names[@]}"; do
      echo "- \$$k = ${!k:-}"
    done
  fi
}

# :command.command_functions

# :command.parse_requirements
parse_requirements() {
  # :command.fixed_flags_filter
  while [[ $# -gt 0 ]]; do
    case "${1:-}" in
      --version | -v)
        version_command
        exit
        ;;

      --help | -h)
        long_usage=yes
        run_usage
        exit
        ;;

      *)
        break
        ;;

    esac
  done

  # :command.environment_variables_filter
  # :command.environment_variables_default
  export PRIVATE_SSH_KEY="${PRIVATE_SSH_KEY:-$HOME/.ssh/id_ed25519}"
  export PUBLIC_SSH_KEY="${PUBLIC_SSH_KEY:-$HOME/.ssh/id_ed25519.pub}"

  env_var_names+=("PRIVATE_SSH_KEY")
  env_var_names+=("PUBLIC_SSH_KEY")

  # :command.command_filter
  action="root"

  # :command.parse_requirements_while
  while [[ $# -gt 0 ]]; do
    key="$1"
    case "$key" in
      # :flag.case
      --test | -t)

        # :flag.case_no_arg
        args['--test']=1
        shift
        ;;

      # :flag.case
      --gitlab_hosts | -g)

        # :flag.case_arg
        if [[ -n ${2+x} ]]; then
          args['--gitlab_hosts']="$2"
          shift
          shift
        else
          printf "%s\n" "--gitlab_hosts requires an argument: --gitlab_hosts, -g GITLAB_HOSTS" >&2
          exit 1
        fi
        ;;

      -?*)
        printf "invalid option: %s\n" "$key" >&2
        exit 1
        ;;

      *)
        # :command.parse_requirements_case
        # :command.parse_requirements_case_simple
        printf "invalid argument: %s\n" "$key" >&2
        exit 1

        ;;

    esac
  done

}

# :command.initialize
initialize() {
  version="0.1.0"
  long_usage=''
  set -e

  # :command.environment_variables_default
  export PRIVATE_SSH_KEY="${PRIVATE_SSH_KEY:-$HOME/.ssh/id_ed25519}"
  export PUBLIC_SSH_KEY="${PUBLIC_SSH_KEY:-$HOME/.ssh/id_ed25519.pub}"

}

# :command.run
run() {
  declare -A args=()
  declare -A deps=()
  declare -a other_args=()
  declare -a env_var_names=()
  declare -a input=()
  normalize_input "$@"
  parse_requirements "${input[@]}"

  case "$action" in
    "root") root_command ;;
  esac
}

initialize
run "$@"
